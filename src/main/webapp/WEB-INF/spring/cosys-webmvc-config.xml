<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:context="http://www.springframework.org/schema/context" 
       xmlns:mvc="http://www.springframework.org/schema/mvc" 
       xmlns:p="http://www.springframework.org/schema/p" 
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd     
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd     
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	
    <security:global-method-security pre-post-annotations="enabled"/>
    
    <!-- Turns on support for mapping requests to Spring MVC @Controller methods
    Also registers default Formatters and Validators for use across all @Controllers -->
    <mvc:annotation-driven validator="validator"/>
    
    <!-- The controllers are autodetected POJOs labeled with the @Controller annotation. -->
    <context:component-scan base-package="com.posabro.ocsys.security.controller"/>

    <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources -->
    <mvc:resources location="/resources/" mapping="/resources/**"/>

	
    <!-- Allows for mapping the DispatcherServlet to "/" by forwarding static resource requests to the container's default Servlet -->
    <mvc:default-servlet-handler/>    
    
    <!-- register "global" interceptor beans to apply to all registered HandlerMappings -->
    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"/>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" p:paramName="lang"/>
    </mvc:interceptors>
	
    <!-- selects a static view for rendering without the need for an explicit controller -->
    <mvc:view-controller path="/" view-name="index"/>
    <mvc:view-controller path="/users"/>
    <mvc:view-controller path="/roles"/>
    <mvc:view-controller path="/dataAccessFailure"/>
    <mvc:view-controller path="/resourceNotFound"/>
    <mvc:view-controller path="/uncaughtException"/>

    <!-- Resolves localized messages*.properties and application.properties files in the application to	allow for internationalization. 
  		The messages*.properties files translate messages, the application.properties
  		resource bundle localizes all application specific messages such as entity names and menu items. -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource" p:basenames="WEB-INF/i18n/messages" p:fallbackToSystemLocale="false"/>
	
    <!-- store preferred language configuration in a cookie -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"
          p:cookieName="locale"/>	
	
    <!-- resolves localized <theme_name>.properties files in the classpath to allow for theme support -->
    <bean id="themeSource" class="org.springframework.ui.context.support.ResourceBundleThemeSource"/>
	
    <!-- store preferred theme configuration in a cookie -->
    <bean id="themeResolver" class="org.springframework.web.servlet.theme.CookieThemeResolver" p:cookieName="theme" p:defaultThemeName="standard"/>

    <!-- This bean resolves specific types of exceptions to corresponding logical - view names for error views. 
    The default behaviour of DispatcherServlet - is to propagate all exceptions to the servlet container: 
    this will happen - here with all other types of exceptions. -->
<!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" p:defaultErrorView="uncaughtException">
        <property name="exceptionMappings">
            <props>
                <prop key=".DataAccessException">dataAccessFailure</prop>
                <prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
                <prop key=".TypeMismatchException">resourceNotFound</prop>
                <prop key=".MissingServletRequestParameterException">resourceNotFound</prop>
                <prop key=".AccessDeniedException">accessDenied/acd</prop>
                
            </props>
        </property>
    </bean>-->
    
    <!--    <bean id="handlerExceptionResolverComposite" class="org.springframework.web.servlet.handler.HandlerExceptionResolverComposite" p:defaultErrorView="uncaughtException">
        <property name="exceptionResolvers">
            <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
                <property name="exceptionMappings">
                    <props>
                        <prop key=".DataAccessException">dataAccessFailure</prop>
                        <prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
                        <prop key=".TypeMismatchException">resourceNotFound</prop>
                        <prop key=".MissingServletRequestParameterException">resourceNotFound</prop>
                    </props>
                </property>
            </bean>
        </property>
    </bean>-->
	
    <!-- Enable file upload functionality -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.support.StandardServletMultipartResolver"/>
    
    <!-- Tiles Configuration -->
    <bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
    </bean>
    
    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>/WEB-INF/tiles/defs/tiles.xml</value>
            </list>
        </property>
    </bean>

    <!-- Configure JSR-303 validation -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="validationMessageSource" ref="messageSource"/>
    </bean> 

</beans>
